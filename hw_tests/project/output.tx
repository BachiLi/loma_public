
Forward differentiation of function d_identity:
def d_identity(x : In[_dfloat]) -> _dfloat:
	return make__dfloat((x).val,(x).dval)

Generated C code for child:

#include <mpi.h>
#include <math.h>
#include <stdlib.h>
        
typedef struct {
	float val;
	float dval;
} _dfloat;
float identity(float x);
_dfloat d_identity(_dfloat x);
_dfloat make__dfloat(float val, float dval);
float identity(float x) {
	return x;
}
_dfloat d_identity(_dfloat x) {
	return make__dfloat((x).val,(x).dval);
}
void d_identity_mpi_worker(){

    MPI_Init(NULL, NULL);

    MPI_Comm parent_comm;
    MPI_Comm_get_parent(&parent_comm);

    if (parent_comm == MPI_COMM_NULL) {
        MPI_Finalize();
        return;
    }

    int world_rank, world_size;
    MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);
    MPI_Comm_size(MPI_COMM_WORLD, &world_size);
    
    _dfloat input;
    MPI_Recv(&input, sizeof(_dfloat), MPI_BYTE, 0, 0, parent_comm, MPI_STATUS_IGNORE);
    _dfloat out = d_identity(input);

    MPI_Send(&out, sizeof(_dfloat), MPI_BYTE, 0, 0, parent_comm);

    MPI_Finalize();
}

int main() {
    d_identity_mpi_worker();
    return 0;
}
_dfloat make__dfloat(float val, float dval) {
	_dfloat ret;
	ret.val = 0;
	ret.dval = 0;
	(ret).val = val;
	(ret).dval = dval;
	return ret;
}

Generated C code for parent:

#include <mpi.h>
#include <math.h>
#include <stdlib.h>
        
typedef struct {
	float val;
	float dval;
} _dfloat;

void mpi_runner( _dfloat x, _dfloat* output, int __total_work) {
    MPI_Init(NULL, NULL);

    int world_rank, world_size;
    MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);
    MPI_Comm_size(MPI_COMM_WORLD, &world_size);

    if (world_rank == 0) {
        // This is the parent process
        MPI_Comm child_comm;
        MPI_Info info;
        MPI_Info_create(&info);

        // Spawn NUM_CHILDREN child processes
        MPI_Comm_spawn("_code/identity.o", MPI_ARGV_NULL, __total_work, info, 0, MPI_COMM_SELF, &child_comm, MPI_ERRCODES_IGNORE);

        for (int i = 0; i < __total_work; i++) {
            // Send input to child process
            MPI_Send(&x, sizeof(_dfloat), MPI_BYTE, i, 0, child_comm);
        }

        // Communicate with children and receive responses
        for (int i = 0; i < __total_work; i++) {
            _dfloat local_output;
            MPI_Recv(&local_output, sizeof(_dfloat), MPI_BYTE, MPI_ANY_SOURCE, 0, child_comm, MPI_STATUS_IGNORE);
            output[i] = local_output;
        }

        MPI_Info_free(&info);
    }

    MPI_Finalize();
}
1.2300000190734863 4.559999942779541
1.2300000190734863 4.559999942779541
